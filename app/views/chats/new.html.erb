<div id="div_device" class="panel panel-default">
  <div class="select">
    <label for="audioSource">Audio source: </label><select id="audioSource"></select>
  </div>
  <div class="select">
    <label for="videoSource">Video source: </label><select id="videoSource"></select>
  </div>
</div>

<div id="div_join" class="panel panel-default">
  <div class="panel-body">
    <button id="join" class="btn btn-primary" onclick="join()">Join</button>
    <button id="leave" class="btn btn-primary" onclick="leave()">Leave</button>
    <button id="publish" class="btn btn-primary" onclick="publish()">Publish</button>
    <button id="unpublish" class="btn btn-primary" onclick="unpublish()">Unpublish</button>
  </div>
</div>

<div id="video" style="margin:0 auto;">
  <div id="agora_local" style="float:right;width:210px;height:147px;display:inline-block;"></div>
</div>

<script language="javascript">

  if (!AgoraRTC.checkSystemRequirements()) {
    alert("Your browser does not support WebRTC!");
  }

  AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.INFO);

  /* simulated data to proof setLogLevel() */
  AgoraRTC.Logger.info('Begin');

  const APP_ID = '<%= @app_id %>';
  const CHANNEL_NAME = '<%= @chat.name %>';

  let heartBeatTimer, chatting_id;
  let client, localStream, camera, microphone;
  let audioSelect = document.querySelector('select#audioSource');
  let videoSelect = document.querySelector('select#videoSource');


  function join() {
    document.getElementById("join").disabled = true;
    document.getElementById("video").disabled = true;
    var channel_key = null;

    client = AgoraRTC.createClient({mode: 'interop'});
    client.init(APP_ID, function () {
      console.log("AgoraRTC client initialized");
      client.join(channel_key, CHANNEL_NAME, null, function (uid) {
        console.log("User " + uid + " join channel successfully");

        camera = videoSource.value;
        microphone = audioSource.value;
        var config = {
          streamID: uid,
          audio: true,
          cameraId: camera,
          microphoneId: microphone,
          video: true,
          screen: false
        };
        console.log("uid: " + uid + ", camera: " + camera + ", mic: " + microphone);
        localStream = AgoraRTC.createStream(config);
        if (document.getElementById("video").checked) {
          localStream.setVideoProfile('720p_3');

        }

        // The user has granted access to the camera and mic.
        localStream.on("accessAllowed", function () {
          console.log("accessAllowed");
        });

        // The user has denied access to the camera and mic.
        localStream.on("accessDenied", function () {
          console.log("accessDenied");
        });

        localStream.init(function () {
          console.log("getUserMedia successfully");
          localStream.play('agora_local');

          client.publish(localStream, function (err) {
            console.log("Publish local stream error: " + err);
          });

          client.on('stream-published', function (evt) {
            console.log("Publish local stream successfully");
          });
        }, function (err) {
          console.log("getUserMedia failed", err);
        });
      }, function (err) {
        console.log("Join channel failed", err);
      });
    }, function (err) {
      console.log("AgoraRTC client init failed", err);
    });

    channelKey = "";
    client.on('error', function (err) {
      console.log("Got error msg:", err.reason);
      if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {
        client.renewChannelKey(channelKey, function () {
          console.log("Renew channel key successfully");
        }, function (err) {
          console.log("Renew channel key failed: ", err);
        });
      }
    });


    client.on('stream-added', function (evt) {
      var stream = evt.stream;
      console.log("New stream added: " + stream.getId());
      console.log("Subscribe ", stream);
      client.subscribe(stream, function (err) {
        console.log("Subscribe stream failed", err);
      });
    });

    client.on('stream-subscribed', function (evt) {
      var stream = evt.stream;
      console.log("Subscribe remote stream successfully: " + stream.getId());
      if ($('div#video #agora_remote' + stream.getId()).length === 0) {
        $('div#video').append('<div id="agora_remote' + stream.getId() + '" style="float:left; width:810px;height:607px;display:inline-block;"></div>');
      }
      stream.play('agora_remote' + stream.getId());
    });

    client.on('stream-removed', function (evt) {
      var stream = evt.stream;
      stream.stop();
      $('#agora_remote' + stream.getId()).remove();
      console.log("Remote stream is removed " + stream.getId());
    });

    client.on('peer-leave', function (evt) {
      var stream = evt.stream;
      if (stream) {
        stream.stop();
        $('#agora_remote' + stream.getId()).remove();
        console.log(evt.uid + " leaved from this channel");
      }
    });

    startChat();
  }

  function leave() {
    document.getElementById("leave").disabled = true;
    client.leave(function () {
      console.log("Leavel channel successfully");
    }, function (err) {
      console.log("Leave channel failed");
    });

    clearTimeout(heartBeatTimer);
    heartBeatTimer = null;
  }

  function publish() {
    document.getElementById("publish").disabled = true;
    document.getElementById("unpublish").disabled = false;
    client.publish(localStream, function (err) {
      console.log("Publish local stream error: " + err);
    });
  }

  function unpublish() {
    document.getElementById("publish").disabled = false;
    document.getElementById("unpublish").disabled = true;
    client.unpublish(localStream, function (err) {
      console.log("Unpublish local stream failed" + err);
    });
  }

  function getDevices() {
    AgoraRTC.getDevices(function (devices) {
      for (var i = 0; i !== devices.length; ++i) {
        var device = devices[i];
        var option = document.createElement('option');
        option.value = device.deviceId;
        if (device.kind === 'audioinput') {
          option.text = device.label || 'microphone ' + (audioSelect.length + 1);
          audioSelect.appendChild(option);
        } else if (device.kind === 'videoinput') {
          option.text = device.label || 'camera ' + (videoSelect.length + 1);
          videoSelect.appendChild(option);
        } else {
          console.log('Some other kind of source/device: ', device);
        }
      }
    });
  }

  function startChat() {
    var url, data;
    <% if current_admin %>
    url = '<%= admin_chattings_path %>';
    data = {
      admin_chatting: {
        admin_id: <%= current_admin.id %>,
        chat_id: <%= @chat.id %>
      }
    };
    <% elsif current_teacher %>
    url = '<%= teacher_chattings_path %>';
    data = {
      teacher_chatting: {
        teacher_id: <%= current_teacher.id %>,
        chat_id: <%= @chat.id %>
      }
    };
    <% elsif current_student %>
    url = '<%= student_chattings_path %>';
    data = {
      student_chatting: {
        student_id: <%= current_student.id %>,
        chat_id: <%= @chat.id %>
      }
    };
    <% end %>

    $.ajax({
      type: 'POST',
      url: url,
      dataType: 'json',
      data: data,
      success: function(id){
        chatting_id = id['id'];
        continusHeartBeat();
        console.log(url + ': ' + id);
      },
      error: function(err){
        console.error(url + ': ' + err);
      }
    });
  }

  function heartBeat() {
    var url;
    <% if current_admin %>
    url = '/admin_chattings/' + chatting_id;
    <% elsif current_teacher %>
    url = '/teacher_chattings/' + chatting_id;
    <% elsif current_student %>
    url = '/student_chattings/' + chatting_id;
    <% end %>
    $.ajax({
      type: 'DELETE',
      url: url,
      dataType: 'script',
      success: function (result) {
        console.info("heartBeat: " + result);
      }
    });
  }

  function continusHeartBeat() {
    heartBeat();
    heartBeatTimer = setTimeout(continusHeartBeat, 60000);
  }

  getDevices();
</script>

<%= javascript_include_tag 'AgoraRTCSDK-2.4.0', 'data-turbolinks-track': 'reload' %>
