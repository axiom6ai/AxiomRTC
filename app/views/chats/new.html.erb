<div class="container">
  <div class="jumbotron row">
   
    <div class="col-sm-8" style="display:none;">
      <div class="select">
        <label for="audioSource"><%= t '.audio_src' %>: </label><select id="audioSource"></select>
      </div>
      <div class="select">
        <label for="videoSource"><%= t'.video_src' %>: </label><select id="videoSource"></select>
      </div>
    </div>
    <div class="col-sm-4">
      <div class="row">
        <button id="join" class="btn btn-primary" onclick="join()"><%= t '.join' %></button>
        <button id="leave" class="btn btn-primary" onclick="leave()"><%= t '.leave' %></button>
      </div>
    </div>
  </div>
  <div id="video" style="margin:0 auto;">
    <div id="agoraLocal" style="float:right;width:210px;height:147px;display:inline-block;"></div>
  </div>
  <div id="selfie" style="margin:0 auto;">
    <div id="agoraVideo" style="float:right;width:210px;height:147px;display:inline-block;"></div>
  </div>
</div>

<script language="javascript">

  if (!AgoraRTC.checkSystemRequirements()) {
    alert("<%= t('.not_compatible') %>");
  }

  AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.INFO);

  AgoraRTC.Logger.info('Begin');

  const APP_ID = '<%= @app_id %>';
  const CHANNEL_NAME = '<%= @chat.name %>';
  console.log("the app id is:" + APP_ID);
  console.log("the channel name is:" + CHANNEL_NAME);

  let heartBeatTimer, chatting_id;
  let screenShareClient, localStream, camera, microphone;
  let audioSelect = document.querySelector('select#audioSource');
  let videoSelect = document.querySelector('select#videoSource');

  let join_bt = document.getElementById('join');
  let leave_bt = document.getElementById('leave');

  join_bt.disabled = false;
  leave_bt.disabled = true;

  let signal, session, channel
  let screenUid
  let videoUid
  
  var videoClient
  var videoStream
  var localStreams = [];

  function join() {
    
    // Signal enable messaging between users 
    signal = Signal(APP_ID)
    session = signal.login("Victor", "_no_need_token")

    session.onLoginSuccess = function(uid){
      console.log("Signal: Logging into Signaling as uid:" + uid)
      channel = session.channelJoin(CHANNEL_NAME);
      channel.onChannelJoined = function(){
        
        channel.messageChannelSend("Signal: Welcome to Axiom Live Coding");

        //session.logout();
      };

      channel.onMessageChannelReceive = function(account, uid, msg){
          console.log("Signal: Got a message");
      }

      channel.onChannelJoined = function(account, uid) {
        console.log("Signal:" + account + " has joined")
      };

      channel.onChannelUserLeaved = function(account, uid) {
        console.log("Signal:" + account + " has left")
      };
      
      channel.onChannelUserList = function(users) {
        console.log("Signal: Joined " + CHANNEL_NAME + " with " + users)

      };
    };

    session.onLogout = function(ecode){

    }
    
    // register screen sharing 

    leave();
    join_bt.disabled = true;
    var channelKey = null;

    screenShareClient = AgoraRTC.createClient({mode: 'live', codec: 'h264'});
    screenShareClient.init(APP_ID, function () {
      console.log("AgoraRTC screen sharing client initialized");
      screenShareClient.join(channelKey, CHANNEL_NAME, 1, function (uid) {
        console.log("Screen sharing: User " + uid + " join channel successfully");
        localStreams.push(uid);
        screenUid = uid
        const config = {
          streamID: uid,
          audio: false,
          video: false,
          screen: true,
          mediaSource: 'window' // dont use application as it will not work on firefox in Windows 
        };
        console.log("uid: " + uid + ", camera: " + camera + ", mic: " + microphone);
        localStream = AgoraRTC.createStream(config);
        
   

        // The user has granted access to the camera and mic.
        localStream.on("accessAllowed", function () {
          console.log("accessAllowed");
        });

        // The user has denied access to the camera and mic.
        localStream.on("accessDenied", function () {
          console.warn("accessDenied");
        });

        localStream.init(function () {
          console.log("getUserMedia successfully");
          localStream.play('agoraLocal');

          screenShareClient.publish(localStream, function (err) {
            console.error("screenShareClient.publish: " + err);
            join_bt.disabled = false;
          });

          screenShareClient.on('stream-published', function (event) {
            console.log("stream-published: done");
            setupVideConference(localStreams);
          });
        }, function (err) {
          console.error('localStream.init: ' + err);
          join_bt.disabled = false;
        });
      }, function (err) {
        console.error("screenShareClient.join: " + err);
        join_bt.disabled = false;
      });
    }, function (err) {
      console.error("screenShareClient.init: " + err);
      join_bt.disabled = false;
    });

    screenShareClient.on('error', function (err) {
      console.error("error: ", err.reason);
      if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {
        screenShareClient.renewChannelKey(channelKey, function () {
          console.log("Renew channel key successfully");
        }, function (err) {
          console.error("screenShareClient.renewChannelKey: " + err);
        });
      }
    });


    screenShareClient.on('stream-added', function (evt) {
      var stream = evt.stream;
      var uid = stream.getId();

      if(!localStreams.includes(uid)) {
        console.log('stream-added: ' + stream.getId());
        screenShareClient.subscribe(stream, function (err) {
          console.error("screenShareClient.subscribe: " + err);
        });
      }

    

    });

    screenShareClient.on('stream-subscribed', function (evt) {
      var stream = evt.stream;
      console.log('stream-subscribed: ' + stream.getId());
      if ($('div#video #agoraRemote' + stream.getId()).length === 0) {
        $('div#video').append('<div id="agoraRemote' + stream.getId() + '" style="float:left; width:810px;height:607px;display:inline-block;"></div>');
      }
      stream.play('agoraRemote' + stream.getId());
    });

    screenShareClient.on('stream-removed', function (evt) {
      var stream = evt.stream;
      stream.stop();
      $('#agoraRemote' + stream.getId()).remove();
      console.long('stream-removed: ' + stream.getId());
    });

    screenShareClient.on('peer-leave', function (evt) {
      var stream = evt.stream;
      if (stream) {
        stream.stop();
        $('#agoraRemote' + stream.getId()).remove();
        console.log('peer-leave: ' + evt.uid);
      }
    });

    startChat();

    if (join_bt.disabled) {
      leave_bt.disabled = false;
    }

    
  }

  function setupVideConference(localStreams) {
    // enable video and audio 
    var channelKey = null
    videoClient = AgoraRTC.createClient({mode: 'interop', codec: 'h264'});
    videoClient.init(APP_ID, function() {
    videoClient.join(channelKey, CHANNEL_NAME, 2, function(uid) {
      console.log("Video and audio joined channel with uid:" + uid)
    
      // Save the uid of the local stream.
      videoUid = uid
      localStreams.push(uid);
      camera = videoSource.value;
      microphone = audioSource.value;

      // Create the video stream.
      videoStream = AgoraRTC.createStream({
        streamID: uid,
        audio: true,
        microphoneId: microphone,
        cameraId: camera,
        video: true,
        screen: false
      });

      // Initialize the stream.
      videoStream.init(function() {
        // Play the stream.
        videoStream.play('agoraVideo');
        // Publish the stream.
  
        videoClient.publish(videoStream, function (err) {
          console.error("videoClient.publish: " + err);
        });

        videoClient.on('stream-published', function (event) {
          console.log("Video conference stream-published: done");
        });

        // Listen to the 'stream-added' event.
        videoClient.on('stream-added', function(evt){
          var stream = evt.stream;
          var uid = stream.getId();

          // Check if the stream is a local uid.
          if(!localStreams.includes(uid)) {
            console.log('subscribe stream:' + uid);
            // Subscribe to the stream.
            screenClient.subscribe(stream);
          }
        })
    }, function (err) {
        console.log(err);
      });
    }, function (err) {
        console.log(err);
      })
    });
  }


  function leave() {
    leave_bt.disabled = true;

    // leave signal
    if (channel !== undefined) {
      channel.channelLeave()
    }
    
    if (screenShareClient) {
      screenShareClient.leave(function () {
        console.log('screenShareClient.leave: done');
      }, function (err) {
        console.error('screenShareClient.leave: ' + err);
        leave_bt.disabled = false;
      });
      screenShareClient = null;
    }

    if (videoClient) {
      videoClient.leave(function() {
        console.log('videoClient.leave: done');
      }, function (err){
        console.error('videoClient.leave: ' + err);
      });
      videoClient = null;
    }

    if (videoStream) {
      videoStream.stop();
      videoStream = null;
    }

    if (localStream) {
      localStream.stop();
      localStream = null;
    }

    if (heartBeatTimer) {
      clearTimeout(heartBeatTimer);
      heartBeatTimer = null;
    }

    if (leave_bt.disabled) {
      join_bt.disabled = false;
    }
  }

  function getDevices() {
    AgoraRTC.getDevices(function (devices) {
      for (var i = 0; i !== devices.length; ++i) {
        var device = devices[i];
        var option = document.createElement('option');
        option.value = device.deviceId;
        if (device.kind === 'audioinput') {
          option.text = device.label || 'microphone ' + (audioSelect.length + 1);
          audioSelect.appendChild(option);
        } else if (device.kind === 'videoinput') {
          option.text = device.label || 'camera ' + (videoSelect.length + 1);
          videoSelect.appendChild(option);
        } else {
          console.warn('Some other kind of source/device: ', device);
        }
      }
    });
  }

  function startChat() {
    var url, data;
    <% if current_admin %>
    url = '<%= admin_chattings_path %>';
    data = {
      admin_chatting: {
        admin_id: <%= current_admin.id %>,
        chat_id: <%= @chat.id %>
      }
    };
    <% elsif current_teacher %>
    url = '<%= teacher_chattings_path %>';
    data = {
      teacher_chatting: {
        teacher_id: <%= current_teacher.id %>,
        chat_id: <%= @chat.id %>
      }
    };
    <% elsif current_student %>
    url = '<%= student_chattings_path %>';
    data = {
      student_chatting: {
        student_id: <%= current_student.id %>,
        chat_id: <%= @chat.id %>
      }
    };
    <% end %>

    $.ajax({
      type: 'POST',
      url: url,
      dataType: 'json',
      data: data,
      success: function (id) {
        chatting_id = id['id'];
        continusHeartBeat();
        console.log(url + ': ' + id);
      },
      error: function (err) {
        console.error(url + ': ' + err);
      }
    });
  }

  function heartBeat() {
    var url;
    <% if current_admin %>
    url = '/admin_chattings/' + chatting_id;
    <% elsif current_teacher %>
    url = '/teacher_chattings/' + chatting_id;
    <% elsif current_student %>
    url = '/student_chattings/' + chatting_id;
    <% end %>
    $.ajax({
      type: 'DELETE',
      url: url,
      dataType: 'script',
      success: function (result) {
        console.info("heartBeat: " + result);
      }
    });
  }

  function continusHeartBeat() {
    heartBeat();
    heartBeatTimer = setTimeout(continusHeartBeat, 60000);
  }

  $(window).unload(function () {
    leave();
  });

  getDevices();
</script>

<%= javascript_include_tag 'AgoraRTCSDK-2.5.0', 'data-turbolinks-track': 'reload' %>
<%= javascript_include_tag 'AgoraSig-1.4.0.js', 'data-turbolinks-track': 'reload' %>
