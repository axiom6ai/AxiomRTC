<div class="container">
  <div></div>
</div>
<div id="div_device" class="panel panel-default">
  <div class="select">
    <label for="audioSource">Audio source: </label><select id="audioSource"></select>
  </div>
  <label for="videoSource">Video source: </label><select id="videoSource"></select>
</div>

Host: <input id="video" type="checkbox" checked/>

<div id="div_join" class="panel panel-default">
  <div class="panel-body">
    <button id="join" class="btn btn-primary" onclick="join()">Join</button>
    <button id="leave" class="btn btn-primary" onclick="leave()">Leave</button>
    <button id="publish" class="btn btn-primary" onclick="publish()">Publish</button>
    <button id="unpublish" class="btn btn-primary" onclick="unpublish()">Unpublish</button>
  </div>
</div>

<div id="video" style="margin:0 auto;">
  <div id="agora_local" style="float:right;width:210px;height:147px;display:inline-block;"></div>
</div>

<script language="javascript">

  if (!AgoraRTC.checkSystemRequirements()) {
    alert("Your browser does not support WebRTC!");
  }

  AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.INFO);

  var client, localStream, camera, microphone;
  var audioSelect = document.querySelector('select#audioSource');
  var videoSelect = document.querySelector('select#videoSource');
  const APP_ID = "<%= @app_id %>";
  const CHANNEL_NAME = "<%= @channel_id %>>";

  function join() {
    document.getElementById("join").disabled = true;
    document.getElementById("video").disabled = true;
    var channel_key = null;

    client = AgoraRTC.createClient({mode: 'interop'});
    client.init(APP_ID, function () {
      console.log("AgoraRTC client initialized");
      client.join(channel_key, CHANNEL_NAME, null, function (uid) {
        console.log("User " + uid + " join channel successfully");

        if (document.getElementById("video").checked) {
          camera = videoSource.value;
          microphone = audioSource.value;
          localStream = AgoraRTC.createStream({
            streamID: uid,
            audio: true,
            cameraId: camera,
            microphoneId: microphone,
            video: document.getElementById("video").checked,
            screen: false
          });
          //localStream = AgoraRTC.createStream({streamID: uid, audio: false, cameraId: camera, microphoneId: microphone, video: false, screen: true, extensionId: 'minllpmhdgpndnkomcoccfekfegnlikg'});
          if (document.getElementById("video").checked) {
            localStream.setVideoProfile('720p_3');

          }

          // The user has granted access to the camera and mic.
          localStream.on("accessAllowed", function () {
            console.log("accessAllowed");
          });

          // The user has denied access to the camera and mic.
          localStream.on("accessDenied", function () {
            console.log("accessDenied");
          });

          localStream.init(function () {
            console.log("getUserMedia successfully");
            localStream.play('agora_local');

            client.publish(localStream, function (err) {
              console.log("Publish local stream error: " + err);
            });

            client.on('stream-published', function (evt) {
              console.log("Publish local stream successfully");
            });
          }, function (err) {
            console.log("getUserMedia failed", err);
          });
        }
      }, function (err) {
        console.log("Join channel failed", err);
      });
    }, function (err) {
      console.log("AgoraRTC client init failed", err);
    });

    channelKey = "";
    client.on('error', function (err) {
      console.log("Got error msg:", err.reason);
      if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {
        client.renewChannelKey(channelKey, function () {
          console.log("Renew channel key successfully");
        }, function (err) {
          console.log("Renew channel key failed: ", err);
        });
      }
    });


    client.on('stream-added', function (evt) {
      var stream = evt.stream;
      console.log("New stream added: " + stream.getId());
      console.log("Subscribe ", stream);
      client.subscribe(stream, function (err) {
        console.log("Subscribe stream failed", err);
      });
    });

    client.on('stream-subscribed', function (evt) {
      var stream = evt.stream;
      console.log("Subscribe remote stream successfully: " + stream.getId());
      if ($('div#video #agora_remote' + stream.getId()).length === 0) {
        $('div#video').append('<div id="agora_remote' + stream.getId() + '" style="float:left; width:810px;height:607px;display:inline-block;"></div>');
      }
      stream.play('agora_remote' + stream.getId());
    });

    client.on('stream-removed', function (evt) {
      var stream = evt.stream;
      stream.stop();
      $('#agora_remote' + stream.getId()).remove();
      console.log("Remote stream is removed " + stream.getId());
    });

    client.on('peer-leave', function (evt) {
      var stream = evt.stream;
      if (stream) {
        stream.stop();
        $('#agora_remote' + stream.getId()).remove();
        console.log(evt.uid + " leaved from this channel");
      }
    });

    document.getElementById("leave").disabled = false;
  }

  function leave() {
    document.getElementById("leave").disabled = true;
    client.leave(function () {
      console.log("Leavel channel successfully");
    }, function (err) {
      console.log("Leave channel failed: " + err);
    });
    client.destroy();
    document.getElementById("join").disabled = false;
  }

  function publish() {
    document.getElementById("publish").disabled = true;
    document.getElementById("unpublish").disabled = false;
    client.publish(localStream, function (err) {
      console.log("Publish local stream error: " + err);
    });
  }

  function unpublish() {
    document.getElementById("publish").disabled = false;
    document.getElementById("unpublish").disabled = true;
    client.unpublish(localStream, function (err) {
      console.log("Unpublish local stream failed" + err);
    });
  }

  function getDevices() {
    AgoraRTC.getDevices(function (devices) {
      for (var i = 0; i !== devices.length; ++i) {
        var device = devices[i];
        var option = document.createElement('option');
        option.value = device.deviceId;
        if (device.kind === 'audioinput') {
          option.text = device.label || 'microphone ' + (audioSelect.length + 1);
          audioSelect.appendChild(option);
        } else if (device.kind === 'videoinput') {
          option.text = device.label || 'camera ' + (videoSelect.length + 1);
          videoSelect.appendChild(option);
        } else {
          console.log('Some other kind of source/device: ', device);
        }
      }
    });
  }

  audioSelect.onchange = getDevices;
  videoSelect.onchange = getDevices;
  getDevices();
</script>

