<!DOCTYPE html>
<html>
<head>
  <title><%= t 'axiom_live' %>></title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  <%= javascript_include_tag 'AgoraRTCSDK-2.4.0', 'data-turbolinks-track': 'reload' %>
</head>

<body>

<nav class="navbar navbar-static-top navbar-default">
  <div class="container">
    <div class="navbar-header">
      <a class="navbar-brand" , href="/">
        <strong><%= t 'axiom_live' %></strong>
      </a>
    </div>
    <div>
      <ul class="nav nav-pills navbar-right">
        <% if @chat.stopped_at %>
          <li><%= "Stopped at #{@chat.stopped_at}" %></li>
        <% else %>
          <li class="dropdown">
            <a class="dropdown-toggle" type="button" id="audio_source"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="true" href="#">
            </a>
            <ul class="dropdown-menu" aria-labelledby="audio_source">
            </ul>
          </li>
          <li class="dropdown">
            <a class="dropdown-toggle" type="button" id="video_source"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="true" href="#">
            </a>
            <ul class="dropdown-menu" aria-labelledby="video_source">
            </ul>
          </li>
        <% end %>
        <li>
          <button class="btn btn-primary" id="join">Join</button>
        </li>
        <li>
          <button class="btn btn-primary" id="leave">Leave</button>
        </li>
        <li>
          <button class="btn btn-primary" id="publish">Publish</button>
        </li>
        <li>
          <button class="btn btn-primary" id="unpublish">Unpublish</button>
        </li>
      </ul>
    </div>
  </div>
</nav>

<div class="container">
  <% if alert %>
    <p class="alert alert-danger fade-in"><%= alert %></p>
  <% elsif notice %>
    <p class="alert alert-info fade-in"><%= notice %></p>
  <% else %>
    <% flash.each do |k, v| %>
      <p class="alert alert-<%= k %> fade-in"><%= v %></p>
    <% end %>
  <% end %>
</div>

<div class="container" id="play_ground">
  <div id="video_local" class="col-sm-12"></div>
</div>

<%= yield %>

<%= render 'layouts/footer' %>
<br/>
<%= debug(params) if Rails.env.development? %>

<script language="javascript">
  let play_ground,
      video_remote, video_local,
      audio_src, video_src,
      audio_src_selected, video_src_selected,
      bt_join, bt_leave, bt_publish, bt_unpublish;
  let isResizing = false, initialized = false;
  let agora, localStream;
  const APP_ID = "<%= @app_id %>";
  const CHANNEL_NAME = "<%= @channel_name %>";
  const ENABLE_VIDEO = true;
  const ENABLE_SCREEN = false;
  const VIDEO_REMOTE_BASE = 'video_remote_';

  function init() {
    play_ground = document.getElementById("play_ground");
    video_remote = document.getElementById("video_remote");
    video_local = document.getElementById("video_local");
    audio_src = document.getElementById("audio_source");
    video_src = document.getElementById("video_source");
    bt_join = document.getElementById("join");
    bt_leave = document.getElementById("leave");
    bt_publish = document.getElementById("publish");
    bt_unpublish = document.getElementById("unpublish");

    if (!(play_ground &&
        video_remote && video_local &&
        audio_src && video_src &&
        bt_join && bt_leave && bt_publish && bt_unpublish)) {
      console.error("Failed on init variables");
    }

    bt_join.onclick = join;
    bt_leave.onclick = leave;
    bt_publish.onclick = publish;
    bt_unpublish.onclick = unpublish;

    bt_leave.disabled = true;
    bt_publish.disabled = true;
    bt_unpublish.disabled = true;

    getDevices();
    window.addEventListener('resize', resizePlayground, false);
    resizePlayground();
  }

  function resizePlayground() {
    if (isResizing) {
      return;
    }
    isResizing = true;

    if (initialized) {
      // TODO: repainting in chatting
    }

    isResizing = false;
  }

  function getDevices() {
    AgoraRTC.getDevices(function (devices) {
      removeChildElements('audio_source');
      removeChildElements('video_source');
      for (var i = 0; i !== devices.length; ++i) {
        const device = devices[i];
        var newElement = document.createElement('li');
        newElement.innerText = device.label;
        newElement.setAttribute('class', 'btn btn-primary');
        if (device.kind === 'audioinput') {
          newElement.setAttribute('id', 'audio_source_' + i);
          audio_src.appendChild(newElement);
        } else if (device.kind === 'videoinput') {
          newElement.setAttribute('id', 'video_source_' + i);
          video_src.appendChild(newElement);
        } else {
          console.warn('Some other kind of source/device: ', device);
        }
      }
    });

    audio_src_selected = audio_src.firstChild;
    video_src_selected = video_src.firstChild;
    if (!(audio_src_selected && video_src_selected)) {
      console.error("No available audio or video device");
    }
  }

  function join() {
    bt_join.disabled = true;
    agora = AgoraRTC.createClient({mode: 'interop'});

    var channelKey = null;

    agora.init(APP_ID, function () {
      console.log("agora initialized");
      agora.join(channelKey, CHANNEL_NAME, null, function (uid) {
        console.log("User" + uid + "Joined into channel " + CHANNEL_NAME);

        localStream = AgoraRTC.createStream({
          streamID: uid,
          audio: true,
          cameraId: video_src_selected,
          microphoneId: audio_src_selected,
          video: ENABLE_VIDEO,
          screen: ENABLE_SCREEN
        });
        if (ENABLE_VIDEO) {
          localStream.setVideoProfile('720p_3');
        }
        localStream.on("accessAllowed", function () {
          console.log("Access allowed");
        });
        localStream.on("accessDenied", function () {
          console.log("Access denied");
        })
        localStream.init(function () {
          console.log("getUserMedia done");
          localStream.play('video_local');
          agora.on('stream-published', function (event) {
            console.log("stream-published: " + event);
          });
          publish();
        }, function (err) {
          console.error("localStream.init: " + err);
        });
      }, function (err) {
        console.error("agora.join: " + err);
      });
    }, function (err) {
      console.error('agora.init: ' + err);
    });

    channelKey = "";

    agora.on('error', function (err) {
      console.error("Got error: " + err);
      if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {
        agora.renewChannelKey(channelKey, function () {
          console.log("Key renew done");
        }, function (err) {
          console.error("agora.renewChannelKey: " + err);
        });
      }
    });

    agora.on('stream-added', function (event) {
      const stream = event.stream;
      console.log("stream-added: " + stream.getId());
      console.log("Subscribe ", stream);
      agora.subscribe(stream, function (err) {
        console.error("agora.subscribe: " + err);
      });
    });

    agora.on('stream-subscribed', function (event) {
      var stream = event.stream;
      console.log('stream-subscribed: ' + stream.getId());
      const video_id = VIDEO_REMOTE_BASE + stream.getId();
      if (!document.getElementById(video_id)) {
        var videoEle = document.createElement('div');
        videoEle.setAttribute('id', video_id);
        videoEle.setAttribute('class', "col-sm-12");
        play_ground.appendChild(videoEle);
      }
      stream.play('video_id');
    });

    agora.on('stream-removed', function (event) {
      removeRemoteStream(event.stream);
    });

    agora.on('peer-leave', function(event){
      var stream = event.stream;
      if(stream){
        removeRemoteStream(stream);
      }
      console.log('peer-leave: ' + event.peerId);
    });

    bt_leave.disabled = false;
    bt_publish.disabled = true;
    bt_unpublish.disabled = false;
  }

  function leave() {
    bt_leave.disabled = true;
    bt_publish.disabled = true;
    bt_unpublish.disabled = true;

    agora.leave(function(){
      console.log('agora.leave done');
    }, function(err){
      console.error('agora.leave: ' + err);
    });

    agora.destroy();

    bt_join.disabled = false;
  }

  function publish() {
    bt_publish.disabled = true;

    if (!(agora && localStream)) {
      console.error("publish: no agora or localStream");
      return;
    }

    agora.publish(localStream, function (err) {
      console.error("agora.publish: " + err);
    });

    bt_unpublish.disabled = false;
  }

  function unpublish() {
    bt_unpublish.disabled = true;

    agora.unpublish(localStream, function(err){
      console.error('agora.unpublish: ' + err);
    });

    bt_publish.disabled = false;
  }

  function removeRemoteStream(stream){
    stream.stop();
    const video_id = VIDEO_REMOTE_BASE + stream.getId();
    removeElement(video_id);
    console.log('stream-removed: ' + stream.getId());
  }

  window.onload = init;
</script>
</body>
</html>
